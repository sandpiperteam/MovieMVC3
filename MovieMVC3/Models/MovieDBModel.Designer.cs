//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_CrewMember_CrewRole", "CrewRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.CrewRole), "CrewMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.CrewMember), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_CrewMember_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "CrewMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.CrewMember), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_CrewMember_Person", "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Person), "CrewMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.CrewMember), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_FilmCharacter_CrewMember", "CrewMember", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.CrewMember), "FilmCharacter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.FilmCharacter), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_PlotKeyword_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "PlotKeyword", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.PlotKeyword), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Quotes_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "Quotes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Quote), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Review_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "Review", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Review), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Storyline_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "Storyline", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Storyline), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Trivia_Film", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), "Trivia", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Trivia), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_PlotKeyword_Keywords", "KeywordList", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.KeywordList), "PlotKeyword", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.PlotKeyword), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Quotes_UserAccount", "UserAccount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.UserAccount), "Quotes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Quote), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Review_UserAccount", "UserAccount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.UserAccount), "Review", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Review), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FK_Trivia_UserAccount", "UserAccount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.UserAccount), "Trivia", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Trivia), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "FilmGenre", "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Film), "Genre", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MovieMVC3.Models.Genre))]
[assembly: EdmRelationshipAttribute("MovieDBModel", "BoxOfficeFilm", "BoxOffice", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.BoxOffice), "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), true)]
[assembly: EdmRelationshipAttribute("MovieDBModel", "TechnicalDetailsFilm", "TechnicalDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.TechnicalDetails), "Film", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MovieMVC3.Models.Film), true)]

#endregion

namespace MovieMVC3.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MovieDBEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MovieDBEntities object using the connection string found in the 'MovieDBEntities' section of the application configuration file.
        /// </summary>
        public MovieDBEntities() : base("name=MovieDBEntities", "MovieDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieDBEntities object.
        /// </summary>
        public MovieDBEntities(string connectionString) : base(connectionString, "MovieDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MovieDBEntities object.
        /// </summary>
        public MovieDBEntities(EntityConnection connection) : base(connection, "MovieDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CrewMember> CrewMembers
        {
            get
            {
                if ((_CrewMembers == null))
                {
                    _CrewMembers = base.CreateObjectSet<CrewMember>("CrewMembers");
                }
                return _CrewMembers;
            }
        }
        private ObjectSet<CrewMember> _CrewMembers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CrewRole> CrewRoles
        {
            get
            {
                if ((_CrewRoles == null))
                {
                    _CrewRoles = base.CreateObjectSet<CrewRole>("CrewRoles");
                }
                return _CrewRoles;
            }
        }
        private ObjectSet<CrewRole> _CrewRoles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Film> Films
        {
            get
            {
                if ((_Films == null))
                {
                    _Films = base.CreateObjectSet<Film>("Films");
                }
                return _Films;
            }
        }
        private ObjectSet<Film> _Films;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FilmCharacter> FilmCharacters
        {
            get
            {
                if ((_FilmCharacters == null))
                {
                    _FilmCharacters = base.CreateObjectSet<FilmCharacter>("FilmCharacters");
                }
                return _FilmCharacters;
            }
        }
        private ObjectSet<FilmCharacter> _FilmCharacters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<KeywordList> KeywordLists
        {
            get
            {
                if ((_KeywordLists == null))
                {
                    _KeywordLists = base.CreateObjectSet<KeywordList>("KeywordLists");
                }
                return _KeywordLists;
            }
        }
        private ObjectSet<KeywordList> _KeywordLists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> People
        {
            get
            {
                if ((_People == null))
                {
                    _People = base.CreateObjectSet<Person>("People");
                }
                return _People;
            }
        }
        private ObjectSet<Person> _People;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlotKeyword> PlotKeywords
        {
            get
            {
                if ((_PlotKeywords == null))
                {
                    _PlotKeywords = base.CreateObjectSet<PlotKeyword>("PlotKeywords");
                }
                return _PlotKeywords;
            }
        }
        private ObjectSet<PlotKeyword> _PlotKeywords;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Quote> Quotes
        {
            get
            {
                if ((_Quotes == null))
                {
                    _Quotes = base.CreateObjectSet<Quote>("Quotes");
                }
                return _Quotes;
            }
        }
        private ObjectSet<Quote> _Quotes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Review> Reviews
        {
            get
            {
                if ((_Reviews == null))
                {
                    _Reviews = base.CreateObjectSet<Review>("Reviews");
                }
                return _Reviews;
            }
        }
        private ObjectSet<Review> _Reviews;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Storyline> Storylines
        {
            get
            {
                if ((_Storylines == null))
                {
                    _Storylines = base.CreateObjectSet<Storyline>("Storylines");
                }
                return _Storylines;
            }
        }
        private ObjectSet<Storyline> _Storylines;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Trivia> Trivias
        {
            get
            {
                if ((_Trivias == null))
                {
                    _Trivias = base.CreateObjectSet<Trivia>("Trivias");
                }
                return _Trivias;
            }
        }
        private ObjectSet<Trivia> _Trivias;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserAccount> UserAccounts
        {
            get
            {
                if ((_UserAccounts == null))
                {
                    _UserAccounts = base.CreateObjectSet<UserAccount>("UserAccounts");
                }
                return _UserAccounts;
            }
        }
        private ObjectSet<UserAccount> _UserAccounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BoxOffice> BoxOffices
        {
            get
            {
                if ((_BoxOffices == null))
                {
                    _BoxOffices = base.CreateObjectSet<BoxOffice>("BoxOffices");
                }
                return _BoxOffices;
            }
        }
        private ObjectSet<BoxOffice> _BoxOffices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TechnicalDetails> TechnicalDetails
        {
            get
            {
                if ((_TechnicalDetails == null))
                {
                    _TechnicalDetails = base.CreateObjectSet<TechnicalDetails>("TechnicalDetails");
                }
                return _TechnicalDetails;
            }
        }
        private ObjectSet<TechnicalDetails> _TechnicalDetails;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CrewMembers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCrewMembers(CrewMember crewMember)
        {
            base.AddObject("CrewMembers", crewMember);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CrewRoles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCrewRoles(CrewRole crewRole)
        {
            base.AddObject("CrewRoles", crewRole);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Films EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilms(Film film)
        {
            base.AddObject("Films", film);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FilmCharacters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFilmCharacters(FilmCharacter filmCharacter)
        {
            base.AddObject("FilmCharacters", filmCharacter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the KeywordLists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToKeywordLists(KeywordList keywordList)
        {
            base.AddObject("KeywordLists", keywordList);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the People EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPeople(Person person)
        {
            base.AddObject("People", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlotKeywords EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlotKeywords(PlotKeyword plotKeyword)
        {
            base.AddObject("PlotKeywords", plotKeyword);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Quotes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToQuotes(Quote quote)
        {
            base.AddObject("Quotes", quote);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Reviews EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReviews(Review review)
        {
            base.AddObject("Reviews", review);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Storylines EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStorylines(Storyline storyline)
        {
            base.AddObject("Storylines", storyline);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Trivias EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTrivias(Trivia trivia)
        {
            base.AddObject("Trivias", trivia);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserAccounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserAccounts(UserAccount userAccount)
        {
            base.AddObject("UserAccounts", userAccount);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BoxOffices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBoxOffices(BoxOffice boxOffice)
        {
            base.AddObject("BoxOffices", boxOffice);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TechnicalDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTechnicalDetails(TechnicalDetails technicalDetails)
        {
            base.AddObject("TechnicalDetails", technicalDetails);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="BoxOffice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BoxOffice : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BoxOffice object.
        /// </summary>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        public static BoxOffice CreateBoxOffice(global::System.Int32 filmId)
        {
            BoxOffice boxOffice = new BoxOffice();
            boxOffice.FilmId = filmId;
            return boxOffice;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                if (_FilmId != value)
                {
                    OnFilmIdChanging(value);
                    ReportPropertyChanging("FilmId");
                    _FilmId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilmId");
                    OnFilmIdChanged();
                }
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TotalGross
        {
            get
            {
                return _TotalGross;
            }
            set
            {
                OnTotalGrossChanging(value);
                ReportPropertyChanging("TotalGross");
                _TotalGross = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalGross");
                OnTotalGrossChanged();
            }
        }
        private Nullable<global::System.Int32> _TotalGross;
        partial void OnTotalGrossChanging(Nullable<global::System.Int32> value);
        partial void OnTotalGrossChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OpeningWeekendGross
        {
            get
            {
                return _OpeningWeekendGross;
            }
            set
            {
                OnOpeningWeekendGrossChanging(value);
                ReportPropertyChanging("OpeningWeekendGross");
                _OpeningWeekendGross = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OpeningWeekendGross");
                OnOpeningWeekendGrossChanged();
            }
        }
        private Nullable<global::System.Int32> _OpeningWeekendGross;
        partial void OnOpeningWeekendGrossChanging(Nullable<global::System.Int32> value);
        partial void OnOpeningWeekendGrossChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Budget
        {
            get
            {
                return _Budget;
            }
            set
            {
                OnBudgetChanging(value);
                ReportPropertyChanging("Budget");
                _Budget = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Budget");
                OnBudgetChanged();
            }
        }
        private Nullable<global::System.Int32> _Budget;
        partial void OnBudgetChanging(Nullable<global::System.Int32> value);
        partial void OnBudgetChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "BoxOfficeFilm", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.BoxOfficeFilm", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.BoxOfficeFilm", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.BoxOfficeFilm", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.BoxOfficeFilm", "Film", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="CrewMember")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CrewMember : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CrewMember object.
        /// </summary>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        /// <param name="personId">Initial value of the PersonId property.</param>
        /// <param name="crewRoleId">Initial value of the CrewRoleId property.</param>
        /// <param name="crewMemberId">Initial value of the CrewMemberId property.</param>
        public static CrewMember CreateCrewMember(global::System.Int32 filmId, global::System.Int32 personId, global::System.Int32 crewRoleId, global::System.Int32 crewMemberId)
        {
            CrewMember crewMember = new CrewMember();
            crewMember.FilmId = filmId;
            crewMember.PersonId = personId;
            crewMember.CrewRoleId = crewRoleId;
            crewMember.CrewMemberId = crewMemberId;
            return crewMember;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                OnPersonIdChanging(value);
                ReportPropertyChanging("PersonId");
                _PersonId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PersonId");
                OnPersonIdChanged();
            }
        }
        private global::System.Int32 _PersonId;
        partial void OnPersonIdChanging(global::System.Int32 value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CrewRoleId
        {
            get
            {
                return _CrewRoleId;
            }
            set
            {
                OnCrewRoleIdChanging(value);
                ReportPropertyChanging("CrewRoleId");
                _CrewRoleId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CrewRoleId");
                OnCrewRoleIdChanged();
            }
        }
        private global::System.Int32 _CrewRoleId;
        partial void OnCrewRoleIdChanging(global::System.Int32 value);
        partial void OnCrewRoleIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CrewMemberId
        {
            get
            {
                return _CrewMemberId;
            }
            set
            {
                if (_CrewMemberId != value)
                {
                    OnCrewMemberIdChanging(value);
                    ReportPropertyChanging("CrewMemberId");
                    _CrewMemberId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CrewMemberId");
                    OnCrewMemberIdChanged();
                }
            }
        }
        private global::System.Int32 _CrewMemberId;
        partial void OnCrewMemberIdChanging(global::System.Int32 value);
        partial void OnCrewMemberIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> BillingPosition
        {
            get
            {
                return _BillingPosition;
            }
            set
            {
                OnBillingPositionChanging(value);
                ReportPropertyChanging("BillingPosition");
                _BillingPosition = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BillingPosition");
                OnBillingPositionChanged();
            }
        }
        private Nullable<global::System.Int32> _BillingPosition;
        partial void OnBillingPositionChanging(Nullable<global::System.Int32> value);
        partial void OnBillingPositionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_CrewRole", "CrewRole")]
        public CrewRole CrewRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewRole>("MovieDBModel.FK_CrewMember_CrewRole", "CrewRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewRole>("MovieDBModel.FK_CrewMember_CrewRole", "CrewRole").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CrewRole> CrewRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewRole>("MovieDBModel.FK_CrewMember_CrewRole", "CrewRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CrewRole>("MovieDBModel.FK_CrewMember_CrewRole", "CrewRole", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_CrewMember_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_CrewMember_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_CrewMember_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_CrewMember_Film", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_Person", "Person")]
        public Person Person
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieDBModel.FK_CrewMember_Person", "Person").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieDBModel.FK_CrewMember_Person", "Person").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> PersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("MovieDBModel.FK_CrewMember_Person", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("MovieDBModel.FK_CrewMember_Person", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_FilmCharacter_CrewMember", "FilmCharacter")]
        public EntityCollection<FilmCharacter> FilmCharacters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FilmCharacter>("MovieDBModel.FK_FilmCharacter_CrewMember", "FilmCharacter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FilmCharacter>("MovieDBModel.FK_FilmCharacter_CrewMember", "FilmCharacter", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="CrewRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CrewRole : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CrewRole object.
        /// </summary>
        /// <param name="crewRoleId">Initial value of the CrewRoleId property.</param>
        /// <param name="role">Initial value of the Role property.</param>
        public static CrewRole CreateCrewRole(global::System.Int32 crewRoleId, global::System.String role)
        {
            CrewRole crewRole = new CrewRole();
            crewRole.CrewRoleId = crewRoleId;
            crewRole.Role = role;
            return crewRole;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CrewRoleId
        {
            get
            {
                return _CrewRoleId;
            }
            set
            {
                if (_CrewRoleId != value)
                {
                    OnCrewRoleIdChanging(value);
                    ReportPropertyChanging("CrewRoleId");
                    _CrewRoleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CrewRoleId");
                    OnCrewRoleIdChanged();
                }
            }
        }
        private global::System.Int32 _CrewRoleId;
        partial void OnCrewRoleIdChanging(global::System.Int32 value);
        partial void OnCrewRoleIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Role
        {
            get
            {
                return _Role;
            }
            set
            {
                OnRoleChanging(value);
                ReportPropertyChanging("Role");
                _Role = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Role");
                OnRoleChanged();
            }
        }
        private global::System.String _Role;
        partial void OnRoleChanging(global::System.String value);
        partial void OnRoleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_CrewRole", "CrewMember")]
        public EntityCollection<CrewMember> CrewMembers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_CrewRole", "CrewMember");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_CrewRole", "CrewMember", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Film")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Film : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Film object.
        /// </summary>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Film CreateFilm(global::System.Int32 filmId, global::System.String name)
        {
            Film film = new Film();
            film.FilmId = filmId;
            film.Name = name;
            return film;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                if (_FilmId != value)
                {
                    OnFilmIdChanging(value);
                    ReportPropertyChanging("FilmId");
                    _FilmId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilmId");
                    OnFilmIdChanged();
                }
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                OnDurationChanging(value);
                ReportPropertyChanging("Duration");
                _Duration = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Duration");
                OnDurationChanged();
            }
        }
        private Nullable<global::System.Int32> _Duration;
        partial void OnDurationChanging(Nullable<global::System.Int32> value);
        partial void OnDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private global::System.String _Rating;
        partial void OnRatingChanging(global::System.String value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ReleaseDate
        {
            get
            {
                return _ReleaseDate;
            }
            set
            {
                OnReleaseDateChanging(value);
                ReportPropertyChanging("ReleaseDate");
                _ReleaseDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReleaseDate");
                OnReleaseDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ReleaseDate;
        partial void OnReleaseDateChanging(Nullable<global::System.DateTime> value);
        partial void OnReleaseDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Tagline
        {
            get
            {
                return _Tagline;
            }
            set
            {
                OnTaglineChanging(value);
                ReportPropertyChanging("Tagline");
                _Tagline = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Tagline");
                OnTaglineChanged();
            }
        }
        private global::System.String _Tagline;
        partial void OnTaglineChanging(global::System.String value);
        partial void OnTaglineChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_Film", "CrewMember")]
        public EntityCollection<CrewMember> CrewMembers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_Film", "CrewMember");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_Film", "CrewMember", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_PlotKeyword_Film", "PlotKeyword")]
        public EntityCollection<PlotKeyword> PlotKeywords
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PlotKeyword>("MovieDBModel.FK_PlotKeyword_Film", "PlotKeyword");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PlotKeyword>("MovieDBModel.FK_PlotKeyword_Film", "PlotKeyword", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Quotes_Film", "Quotes")]
        public EntityCollection<Quote> Quotes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Quote>("MovieDBModel.FK_Quotes_Film", "Quotes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Quote>("MovieDBModel.FK_Quotes_Film", "Quotes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Review_Film", "Review")]
        public EntityCollection<Review> Reviews
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Review>("MovieDBModel.FK_Review_Film", "Review");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Review>("MovieDBModel.FK_Review_Film", "Review", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Storyline_Film", "Storyline")]
        public EntityCollection<Storyline> Storylines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Storyline>("MovieDBModel.FK_Storyline_Film", "Storyline");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Storyline>("MovieDBModel.FK_Storyline_Film", "Storyline", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Trivia_Film", "Trivia")]
        public EntityCollection<Trivia> Trivias
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trivia>("MovieDBModel.FK_Trivia_Film", "Trivia");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trivia>("MovieDBModel.FK_Trivia_Film", "Trivia", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FilmGenre", "Genre")]
        public EntityCollection<Genre> Genres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Genre>("MovieDBModel.FilmGenre", "Genre");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Genre>("MovieDBModel.FilmGenre", "Genre", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "BoxOfficeFilm", "BoxOffice")]
        public BoxOffice BoxOffice
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BoxOffice>("MovieDBModel.BoxOfficeFilm", "BoxOffice").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BoxOffice>("MovieDBModel.BoxOfficeFilm", "BoxOffice").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BoxOffice> BoxOfficeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BoxOffice>("MovieDBModel.BoxOfficeFilm", "BoxOffice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BoxOffice>("MovieDBModel.BoxOfficeFilm", "BoxOffice", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "TechnicalDetailsFilm", "TechnicalDetails")]
        public TechnicalDetails TechnicalDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalDetails>("MovieDBModel.TechnicalDetailsFilm", "TechnicalDetails").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalDetails>("MovieDBModel.TechnicalDetailsFilm", "TechnicalDetails").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TechnicalDetails> TechnicalDetailReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalDetails>("MovieDBModel.TechnicalDetailsFilm", "TechnicalDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TechnicalDetails>("MovieDBModel.TechnicalDetailsFilm", "TechnicalDetails", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="FilmCharacter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FilmCharacter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FilmCharacter object.
        /// </summary>
        /// <param name="filmCharacterId">Initial value of the FilmCharacterId property.</param>
        /// <param name="crewMemberId">Initial value of the CrewMemberId property.</param>
        /// <param name="characterName">Initial value of the CharacterName property.</param>
        public static FilmCharacter CreateFilmCharacter(global::System.Int32 filmCharacterId, global::System.Int32 crewMemberId, global::System.String characterName)
        {
            FilmCharacter filmCharacter = new FilmCharacter();
            filmCharacter.FilmCharacterId = filmCharacterId;
            filmCharacter.CrewMemberId = crewMemberId;
            filmCharacter.CharacterName = characterName;
            return filmCharacter;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmCharacterId
        {
            get
            {
                return _FilmCharacterId;
            }
            set
            {
                if (_FilmCharacterId != value)
                {
                    OnFilmCharacterIdChanging(value);
                    ReportPropertyChanging("FilmCharacterId");
                    _FilmCharacterId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilmCharacterId");
                    OnFilmCharacterIdChanged();
                }
            }
        }
        private global::System.Int32 _FilmCharacterId;
        partial void OnFilmCharacterIdChanging(global::System.Int32 value);
        partial void OnFilmCharacterIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CrewMemberId
        {
            get
            {
                return _CrewMemberId;
            }
            set
            {
                OnCrewMemberIdChanging(value);
                ReportPropertyChanging("CrewMemberId");
                _CrewMemberId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CrewMemberId");
                OnCrewMemberIdChanged();
            }
        }
        private global::System.Int32 _CrewMemberId;
        partial void OnCrewMemberIdChanging(global::System.Int32 value);
        partial void OnCrewMemberIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CharacterName
        {
            get
            {
                return _CharacterName;
            }
            set
            {
                OnCharacterNameChanging(value);
                ReportPropertyChanging("CharacterName");
                _CharacterName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CharacterName");
                OnCharacterNameChanged();
            }
        }
        private global::System.String _CharacterName;
        partial void OnCharacterNameChanging(global::System.String value);
        partial void OnCharacterNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_FilmCharacter_CrewMember", "CrewMember")]
        public CrewMember CrewMember
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewMember>("MovieDBModel.FK_FilmCharacter_CrewMember", "CrewMember").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewMember>("MovieDBModel.FK_FilmCharacter_CrewMember", "CrewMember").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CrewMember> CrewMemberReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CrewMember>("MovieDBModel.FK_FilmCharacter_CrewMember", "CrewMember");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CrewMember>("MovieDBModel.FK_FilmCharacter_CrewMember", "CrewMember", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="genreId">Initial value of the GenreId property.</param>
        /// <param name="genreType">Initial value of the GenreType property.</param>
        public static Genre CreateGenre(global::System.Int32 genreId, global::System.String genreType)
        {
            Genre genre = new Genre();
            genre.GenreId = genreId;
            genre.GenreType = genreType;
            return genre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenreId
        {
            get
            {
                return _GenreId;
            }
            set
            {
                if (_GenreId != value)
                {
                    OnGenreIdChanging(value);
                    ReportPropertyChanging("GenreId");
                    _GenreId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenreId");
                    OnGenreIdChanged();
                }
            }
        }
        private global::System.Int32 _GenreId;
        partial void OnGenreIdChanging(global::System.Int32 value);
        partial void OnGenreIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GenreType
        {
            get
            {
                return _GenreType;
            }
            set
            {
                OnGenreTypeChanging(value);
                ReportPropertyChanging("GenreType");
                _GenreType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GenreType");
                OnGenreTypeChanged();
            }
        }
        private global::System.String _GenreType;
        partial void OnGenreTypeChanging(global::System.String value);
        partial void OnGenreTypeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FilmGenre", "Film")]
        public EntityCollection<Film> Films
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Film>("MovieDBModel.FilmGenre", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Film>("MovieDBModel.FilmGenre", "Film", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="KeywordList")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class KeywordList : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new KeywordList object.
        /// </summary>
        /// <param name="keywordId">Initial value of the KeywordId property.</param>
        /// <param name="keyword">Initial value of the Keyword property.</param>
        public static KeywordList CreateKeywordList(global::System.Int32 keywordId, global::System.String keyword)
        {
            KeywordList keywordList = new KeywordList();
            keywordList.KeywordId = keywordId;
            keywordList.Keyword = keyword;
            return keywordList;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 KeywordId
        {
            get
            {
                return _KeywordId;
            }
            set
            {
                if (_KeywordId != value)
                {
                    OnKeywordIdChanging(value);
                    ReportPropertyChanging("KeywordId");
                    _KeywordId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("KeywordId");
                    OnKeywordIdChanged();
                }
            }
        }
        private global::System.Int32 _KeywordId;
        partial void OnKeywordIdChanging(global::System.Int32 value);
        partial void OnKeywordIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Keyword
        {
            get
            {
                return _Keyword;
            }
            set
            {
                OnKeywordChanging(value);
                ReportPropertyChanging("Keyword");
                _Keyword = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Keyword");
                OnKeywordChanged();
            }
        }
        private global::System.String _Keyword;
        partial void OnKeywordChanging(global::System.String value);
        partial void OnKeywordChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_PlotKeyword_Keywords", "PlotKeyword")]
        public EntityCollection<PlotKeyword> PlotKeywords
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PlotKeyword>("MovieDBModel.FK_PlotKeyword_Keywords", "PlotKeyword");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PlotKeyword>("MovieDBModel.FK_PlotKeyword_Keywords", "PlotKeyword", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="personId">Initial value of the PersonId property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="sex">Initial value of the Sex property.</param>
        public static Person CreatePerson(global::System.Int32 personId, global::System.String firstName, global::System.String lastName, global::System.String sex)
        {
            Person person = new Person();
            person.PersonId = personId;
            person.FirstName = firstName;
            person.LastName = lastName;
            person.Sex = sex;
            return person;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Int32 _PersonId;
        partial void OnPersonIdChanging(global::System.Int32 value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateOfBirth
        {
            get
            {
                return _DateOfBirth;
            }
            set
            {
                OnDateOfBirthChanging(value);
                ReportPropertyChanging("DateOfBirth");
                _DateOfBirth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateOfBirth");
                OnDateOfBirthChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateOfBirth;
        partial void OnDateOfBirthChanging(Nullable<global::System.DateTime> value);
        partial void OnDateOfBirthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
                OnSexChanging(value);
                ReportPropertyChanging("Sex");
                _Sex = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Sex");
                OnSexChanged();
            }
        }
        private global::System.String _Sex;
        partial void OnSexChanging(global::System.String value);
        partial void OnSexChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_CrewMember_Person", "CrewMember")]
        public EntityCollection<CrewMember> CrewMembers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_Person", "CrewMember");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CrewMember>("MovieDBModel.FK_CrewMember_Person", "CrewMember", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="PlotKeyword")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PlotKeyword : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PlotKeyword object.
        /// </summary>
        /// <param name="plotKeywordId">Initial value of the PlotKeywordId property.</param>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        /// <param name="keywordId">Initial value of the KeywordId property.</param>
        public static PlotKeyword CreatePlotKeyword(global::System.Int32 plotKeywordId, global::System.Int32 filmId, global::System.Int32 keywordId)
        {
            PlotKeyword plotKeyword = new PlotKeyword();
            plotKeyword.PlotKeywordId = plotKeywordId;
            plotKeyword.FilmId = filmId;
            plotKeyword.KeywordId = keywordId;
            return plotKeyword;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PlotKeywordId
        {
            get
            {
                return _PlotKeywordId;
            }
            set
            {
                if (_PlotKeywordId != value)
                {
                    OnPlotKeywordIdChanging(value);
                    ReportPropertyChanging("PlotKeywordId");
                    _PlotKeywordId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlotKeywordId");
                    OnPlotKeywordIdChanged();
                }
            }
        }
        private global::System.Int32 _PlotKeywordId;
        partial void OnPlotKeywordIdChanging(global::System.Int32 value);
        partial void OnPlotKeywordIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 KeywordId
        {
            get
            {
                return _KeywordId;
            }
            set
            {
                OnKeywordIdChanging(value);
                ReportPropertyChanging("KeywordId");
                _KeywordId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("KeywordId");
                OnKeywordIdChanged();
            }
        }
        private global::System.Int32 _KeywordId;
        partial void OnKeywordIdChanging(global::System.Int32 value);
        partial void OnKeywordIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_PlotKeyword_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_PlotKeyword_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_PlotKeyword_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_PlotKeyword_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_PlotKeyword_Film", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_PlotKeyword_Keywords", "KeywordList")]
        public KeywordList KeywordList
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeywordList>("MovieDBModel.FK_PlotKeyword_Keywords", "KeywordList").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeywordList>("MovieDBModel.FK_PlotKeyword_Keywords", "KeywordList").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<KeywordList> KeywordListReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeywordList>("MovieDBModel.FK_PlotKeyword_Keywords", "KeywordList");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<KeywordList>("MovieDBModel.FK_PlotKeyword_Keywords", "KeywordList", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Quote")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Quote : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Quote object.
        /// </summary>
        /// <param name="quoteId">Initial value of the QuoteId property.</param>
        /// <param name="quoteText">Initial value of the QuoteText property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        public static Quote CreateQuote(global::System.Int32 quoteId, global::System.String quoteText, global::System.DateTime dateAdded, global::System.Int32 userId, global::System.Int32 filmId)
        {
            Quote quote = new Quote();
            quote.QuoteId = quoteId;
            quote.QuoteText = quoteText;
            quote.DateAdded = dateAdded;
            quote.UserId = userId;
            quote.FilmId = filmId;
            return quote;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 QuoteId
        {
            get
            {
                return _QuoteId;
            }
            set
            {
                if (_QuoteId != value)
                {
                    OnQuoteIdChanging(value);
                    ReportPropertyChanging("QuoteId");
                    _QuoteId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("QuoteId");
                    OnQuoteIdChanged();
                }
            }
        }
        private global::System.Int32 _QuoteId;
        partial void OnQuoteIdChanging(global::System.Int32 value);
        partial void OnQuoteIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String QuoteText
        {
            get
            {
                return _QuoteText;
            }
            set
            {
                OnQuoteTextChanging(value);
                ReportPropertyChanging("QuoteText");
                _QuoteText = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("QuoteText");
                OnQuoteTextChanged();
            }
        }
        private global::System.String _QuoteText;
        partial void OnQuoteTextChanging(global::System.String value);
        partial void OnQuoteTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Quotes_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Quotes_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Quotes_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Quotes_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_Quotes_Film", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Quotes_UserAccount", "UserAccount")]
        public UserAccount UserAccount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Quotes_UserAccount", "UserAccount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Quotes_UserAccount", "UserAccount").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserAccount> UserAccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Quotes_UserAccount", "UserAccount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserAccount>("MovieDBModel.FK_Quotes_UserAccount", "UserAccount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Review")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Review : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Review object.
        /// </summary>
        /// <param name="reviewId">Initial value of the ReviewId property.</param>
        /// <param name="reviewText">Initial value of the ReviewText property.</param>
        /// <param name="rating">Initial value of the Rating property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="isVisible">Initial value of the IsVisible property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        public static Review CreateReview(global::System.Int32 reviewId, global::System.String reviewText, global::System.Int32 rating, global::System.DateTime dateAdded, global::System.Boolean isVisible, global::System.Int32 userId, global::System.Int32 filmId)
        {
            Review review = new Review();
            review.ReviewId = reviewId;
            review.ReviewText = reviewText;
            review.Rating = rating;
            review.DateAdded = dateAdded;
            review.IsVisible = isVisible;
            review.UserId = userId;
            review.FilmId = filmId;
            return review;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReviewId
        {
            get
            {
                return _ReviewId;
            }
            set
            {
                if (_ReviewId != value)
                {
                    OnReviewIdChanging(value);
                    ReportPropertyChanging("ReviewId");
                    _ReviewId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReviewId");
                    OnReviewIdChanged();
                }
            }
        }
        private global::System.Int32 _ReviewId;
        partial void OnReviewIdChanging(global::System.Int32 value);
        partial void OnReviewIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReviewText
        {
            get
            {
                return _ReviewText;
            }
            set
            {
                OnReviewTextChanging(value);
                ReportPropertyChanging("ReviewText");
                _ReviewText = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReviewText");
                OnReviewTextChanged();
            }
        }
        private global::System.String _ReviewText;
        partial void OnReviewTextChanging(global::System.String value);
        partial void OnReviewTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private global::System.Int32 _Rating;
        partial void OnRatingChanging(global::System.Int32 value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsVisible
        {
            get
            {
                return _IsVisible;
            }
            set
            {
                OnIsVisibleChanging(value);
                ReportPropertyChanging("IsVisible");
                _IsVisible = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsVisible");
                OnIsVisibleChanged();
            }
        }
        private global::System.Boolean _IsVisible;
        partial void OnIsVisibleChanging(global::System.Boolean value);
        partial void OnIsVisibleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Review_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Review_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Review_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Review_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_Review_Film", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Review_UserAccount", "UserAccount")]
        public UserAccount UserAccount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Review_UserAccount", "UserAccount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Review_UserAccount", "UserAccount").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserAccount> UserAccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Review_UserAccount", "UserAccount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserAccount>("MovieDBModel.FK_Review_UserAccount", "UserAccount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Storyline")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Storyline : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Storyline object.
        /// </summary>
        /// <param name="storylineId">Initial value of the StorylineId property.</param>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        /// <param name="plotSynopsis">Initial value of the PlotSynopsis property.</param>
        /// <param name="plotSummary">Initial value of the PlotSummary property.</param>
        /// <param name="storyOutline">Initial value of the StoryOutline property.</param>
        public static Storyline CreateStoryline(global::System.Int32 storylineId, global::System.Int32 filmId, global::System.String plotSynopsis, global::System.String plotSummary, global::System.String storyOutline)
        {
            Storyline storyline = new Storyline();
            storyline.StorylineId = storylineId;
            storyline.FilmId = filmId;
            storyline.PlotSynopsis = plotSynopsis;
            storyline.PlotSummary = plotSummary;
            storyline.StoryOutline = storyOutline;
            return storyline;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StorylineId
        {
            get
            {
                return _StorylineId;
            }
            set
            {
                if (_StorylineId != value)
                {
                    OnStorylineIdChanging(value);
                    ReportPropertyChanging("StorylineId");
                    _StorylineId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StorylineId");
                    OnStorylineIdChanged();
                }
            }
        }
        private global::System.Int32 _StorylineId;
        partial void OnStorylineIdChanging(global::System.Int32 value);
        partial void OnStorylineIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PlotSynopsis
        {
            get
            {
                return _PlotSynopsis;
            }
            set
            {
                OnPlotSynopsisChanging(value);
                ReportPropertyChanging("PlotSynopsis");
                _PlotSynopsis = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PlotSynopsis");
                OnPlotSynopsisChanged();
            }
        }
        private global::System.String _PlotSynopsis;
        partial void OnPlotSynopsisChanging(global::System.String value);
        partial void OnPlotSynopsisChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PlotSummary
        {
            get
            {
                return _PlotSummary;
            }
            set
            {
                OnPlotSummaryChanging(value);
                ReportPropertyChanging("PlotSummary");
                _PlotSummary = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PlotSummary");
                OnPlotSummaryChanged();
            }
        }
        private global::System.String _PlotSummary;
        partial void OnPlotSummaryChanging(global::System.String value);
        partial void OnPlotSummaryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StoryOutline
        {
            get
            {
                return _StoryOutline;
            }
            set
            {
                OnStoryOutlineChanging(value);
                ReportPropertyChanging("StoryOutline");
                _StoryOutline = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StoryOutline");
                OnStoryOutlineChanged();
            }
        }
        private global::System.String _StoryOutline;
        partial void OnStoryOutlineChanging(global::System.String value);
        partial void OnStoryOutlineChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Storyline_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Storyline_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Storyline_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Storyline_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_Storyline_Film", "Film", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="TechnicalDetails")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TechnicalDetails : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TechnicalDetails object.
        /// </summary>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        public static TechnicalDetails CreateTechnicalDetails(global::System.Int32 filmId)
        {
            TechnicalDetails technicalDetails = new TechnicalDetails();
            technicalDetails.FilmId = filmId;
            return technicalDetails;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                if (_FilmId != value)
                {
                    OnFilmIdChanging(value);
                    ReportPropertyChanging("FilmId");
                    _FilmId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FilmId");
                    OnFilmIdChanged();
                }
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Camera
        {
            get
            {
                return _Camera;
            }
            set
            {
                OnCameraChanging(value);
                ReportPropertyChanging("Camera");
                _Camera = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Camera");
                OnCameraChanged();
            }
        }
        private global::System.String _Camera;
        partial void OnCameraChanging(global::System.String value);
        partial void OnCameraChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Laboratory
        {
            get
            {
                return _Laboratory;
            }
            set
            {
                OnLaboratoryChanging(value);
                ReportPropertyChanging("Laboratory");
                _Laboratory = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Laboratory");
                OnLaboratoryChanged();
            }
        }
        private global::System.String _Laboratory;
        partial void OnLaboratoryChanging(global::System.String value);
        partial void OnLaboratoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FilmNegativeFormat
        {
            get
            {
                return _FilmNegativeFormat;
            }
            set
            {
                OnFilmNegativeFormatChanging(value);
                ReportPropertyChanging("FilmNegativeFormat");
                _FilmNegativeFormat = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FilmNegativeFormat");
                OnFilmNegativeFormatChanged();
            }
        }
        private global::System.String _FilmNegativeFormat;
        partial void OnFilmNegativeFormatChanging(global::System.String value);
        partial void OnFilmNegativeFormatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CinematographicProcess
        {
            get
            {
                return _CinematographicProcess;
            }
            set
            {
                OnCinematographicProcessChanging(value);
                ReportPropertyChanging("CinematographicProcess");
                _CinematographicProcess = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CinematographicProcess");
                OnCinematographicProcessChanged();
            }
        }
        private global::System.String _CinematographicProcess;
        partial void OnCinematographicProcessChanging(global::System.String value);
        partial void OnCinematographicProcessChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrintedFilmFormat
        {
            get
            {
                return _PrintedFilmFormat;
            }
            set
            {
                OnPrintedFilmFormatChanging(value);
                ReportPropertyChanging("PrintedFilmFormat");
                _PrintedFilmFormat = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrintedFilmFormat");
                OnPrintedFilmFormatChanged();
            }
        }
        private global::System.String _PrintedFilmFormat;
        partial void OnPrintedFilmFormatChanging(global::System.String value);
        partial void OnPrintedFilmFormatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AspectRatio
        {
            get
            {
                return _AspectRatio;
            }
            set
            {
                OnAspectRatioChanging(value);
                ReportPropertyChanging("AspectRatio");
                _AspectRatio = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AspectRatio");
                OnAspectRatioChanged();
            }
        }
        private global::System.String _AspectRatio;
        partial void OnAspectRatioChanging(global::System.String value);
        partial void OnAspectRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FilmLength
        {
            get
            {
                return _FilmLength;
            }
            set
            {
                OnFilmLengthChanging(value);
                ReportPropertyChanging("FilmLength");
                _FilmLength = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmLength");
                OnFilmLengthChanged();
            }
        }
        private Nullable<global::System.Int32> _FilmLength;
        partial void OnFilmLengthChanging(Nullable<global::System.Int32> value);
        partial void OnFilmLengthChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "TechnicalDetailsFilm", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.TechnicalDetailsFilm", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.TechnicalDetailsFilm", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.TechnicalDetailsFilm", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.TechnicalDetailsFilm", "Film", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="Trivia")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Trivia : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Trivia object.
        /// </summary>
        /// <param name="triviaId">Initial value of the TriviaId property.</param>
        /// <param name="triviaText">Initial value of the TriviaText property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="filmId">Initial value of the FilmId property.</param>
        public static Trivia CreateTrivia(global::System.Int32 triviaId, global::System.String triviaText, global::System.DateTime dateAdded, global::System.Int32 userId, global::System.Int32 filmId)
        {
            Trivia trivia = new Trivia();
            trivia.TriviaId = triviaId;
            trivia.TriviaText = triviaText;
            trivia.DateAdded = dateAdded;
            trivia.UserId = userId;
            trivia.FilmId = filmId;
            return trivia;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TriviaId
        {
            get
            {
                return _TriviaId;
            }
            set
            {
                if (_TriviaId != value)
                {
                    OnTriviaIdChanging(value);
                    ReportPropertyChanging("TriviaId");
                    _TriviaId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TriviaId");
                    OnTriviaIdChanged();
                }
            }
        }
        private global::System.Int32 _TriviaId;
        partial void OnTriviaIdChanging(global::System.Int32 value);
        partial void OnTriviaIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TriviaText
        {
            get
            {
                return _TriviaText;
            }
            set
            {
                OnTriviaTextChanging(value);
                ReportPropertyChanging("TriviaText");
                _TriviaText = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TriviaText");
                OnTriviaTextChanged();
            }
        }
        private global::System.String _TriviaText;
        partial void OnTriviaTextChanging(global::System.String value);
        partial void OnTriviaTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FilmId
        {
            get
            {
                return _FilmId;
            }
            set
            {
                OnFilmIdChanging(value);
                ReportPropertyChanging("FilmId");
                _FilmId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FilmId");
                OnFilmIdChanged();
            }
        }
        private global::System.Int32 _FilmId;
        partial void OnFilmIdChanging(global::System.Int32 value);
        partial void OnFilmIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Trivia_Film", "Film")]
        public Film Film
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Trivia_Film", "Film").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Trivia_Film", "Film").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Film> FilmReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Film>("MovieDBModel.FK_Trivia_Film", "Film");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Film>("MovieDBModel.FK_Trivia_Film", "Film", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Trivia_UserAccount", "UserAccount")]
        public UserAccount UserAccount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Trivia_UserAccount", "UserAccount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Trivia_UserAccount", "UserAccount").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserAccount> UserAccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserAccount>("MovieDBModel.FK_Trivia_UserAccount", "UserAccount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserAccount>("MovieDBModel.FK_Trivia_UserAccount", "UserAccount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MovieDBModel", Name="UserAccount")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserAccount : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserAccount object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="emailAddress">Initial value of the EmailAddress property.</param>
        /// <param name="accountDisabled">Initial value of the AccountDisabled property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        public static UserAccount CreateUserAccount(global::System.Int32 userId, global::System.String username, global::System.String emailAddress, global::System.Boolean accountDisabled, global::System.DateTime dateAdded)
        {
            UserAccount userAccount = new UserAccount();
            userAccount.UserId = userId;
            userAccount.Username = username;
            userAccount.EmailAddress = emailAddress;
            userAccount.AccountDisabled = accountDisabled;
            userAccount.DateAdded = dateAdded;
            return userAccount;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EmailAddress
        {
            get
            {
                return _EmailAddress;
            }
            set
            {
                OnEmailAddressChanging(value);
                ReportPropertyChanging("EmailAddress");
                _EmailAddress = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EmailAddress");
                OnEmailAddressChanged();
            }
        }
        private global::System.String _EmailAddress;
        partial void OnEmailAddressChanging(global::System.String value);
        partial void OnEmailAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AccountDisabled
        {
            get
            {
                return _AccountDisabled;
            }
            set
            {
                OnAccountDisabledChanging(value);
                ReportPropertyChanging("AccountDisabled");
                _AccountDisabled = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountDisabled");
                OnAccountDisabledChanged();
            }
        }
        private global::System.Boolean _AccountDisabled;
        partial void OnAccountDisabledChanging(global::System.Boolean value);
        partial void OnAccountDisabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PasswordHash
        {
            get
            {
                return _PasswordHash;
            }
            set
            {
                OnPasswordHashChanging(value);
                ReportPropertyChanging("PasswordHash");
                _PasswordHash = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswordHash");
                OnPasswordHashChanged();
            }
        }
        private global::System.String _PasswordHash;
        partial void OnPasswordHashChanging(global::System.String value);
        partial void OnPasswordHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PasswordSalt
        {
            get
            {
                return _PasswordSalt;
            }
            set
            {
                OnPasswordSaltChanging(value);
                ReportPropertyChanging("PasswordSalt");
                _PasswordSalt = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswordSalt");
                OnPasswordSaltChanged();
            }
        }
        private global::System.String _PasswordSalt;
        partial void OnPasswordSaltChanging(global::System.String value);
        partial void OnPasswordSaltChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Quotes_UserAccount", "Quotes")]
        public EntityCollection<Quote> Quotes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Quote>("MovieDBModel.FK_Quotes_UserAccount", "Quotes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Quote>("MovieDBModel.FK_Quotes_UserAccount", "Quotes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Review_UserAccount", "Review")]
        public EntityCollection<Review> Reviews
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Review>("MovieDBModel.FK_Review_UserAccount", "Review");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Review>("MovieDBModel.FK_Review_UserAccount", "Review", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MovieDBModel", "FK_Trivia_UserAccount", "Trivia")]
        public EntityCollection<Trivia> Trivias
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trivia>("MovieDBModel.FK_Trivia_UserAccount", "Trivia");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trivia>("MovieDBModel.FK_Trivia_UserAccount", "Trivia", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
